package org.jbpm.pvm.internal.expr;

import java.util.HashMap;
import javax.script.Bindings;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.jbpm.api.JbpmException;
import org.jbpm.pvm.internal.script.EnvironmentBindings;
import org.jbpm.pvm.internal.script.ScriptManager;

/**
 * @author Michael Wohlfart
 */
public class CustomScriptManager extends ScriptManager {

    protected class CustomEnvironmentBindings extends EnvironmentBindings {
        private HashMap map = new HashMap<String, Object>();

        public CustomEnvironmentBindings() {
            super(null, null);
        }

        @Override
        public Object put(String key, Object value) {
          return map.put(key, value);
        }

        @Override
        public Object get(Object key) {
            Object result = super.get(key);
            if (result == null) {
                result = map.get(key);
            }
            return result;
        }
    }

    public CustomScriptManager() {
        scriptEngineManager = new ScriptEngineManager();
        scriptEngineManager.registerEngineName("juel", new org.jbpm.pvm.internal.script.JuelScriptEngineFactory());
    }

    @Override
    protected Object evaluate(ScriptEngine scriptEngine, String script) {
        Bindings bindings = new CustomEnvironmentBindings();

        // adding any custom bindings here:
        bindings.put("pi", "3.14");


        scriptEngine.setBindings(bindings, ScriptContext.ENGINE_SCOPE);

        try {
            Object result = scriptEngine.eval(script);
            return result;
        } catch (ScriptException e) {
            throw new JbpmException("script evaluation error: " + e.getMessage(), e);
        }
    }


}
